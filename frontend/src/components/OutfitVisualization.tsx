import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, RotateCcw, Download, Eye } from 'lucide-react';
import { ShoeVisualization } from '../types';

interface OutfitVisualizationProps {
  visualizations: ShoeVisualization[];
}

const OutfitVisualization: React.FC<OutfitVisualizationProps> = ({ visualizations }) => {
  const [currentShoeIndex, setCurrentShoeIndex] = useState(0);
  const [currentAngleIndex, setCurrentAngleIndex] = useState(0);

  const currentShoe = visualizations[currentShoeIndex];
  const currentVisualization = currentShoe?.visualizations[currentAngleIndex];

  const nextShoe = () => {
    setCurrentShoeIndex((prev) => (prev + 1) % visualizations.length);
    setCurrentAngleIndex(0);
  };

  const prevShoe = () => {
    setCurrentShoeIndex((prev) => (prev - 1 + visualizations.length) % visualizations.length);
    setCurrentAngleIndex(0);
  };

  const nextAngle = () => {
    setCurrentAngleIndex((prev) => (prev + 1) % currentShoe.visualizations.length);
  };

  const prevAngle = () => {
    setCurrentAngleIndex((prev) => (prev - 1 + currentShoe.visualizations.length) % currentShoe.visualizations.length);
  };

  const downloadImage = () => {
    if (currentVisualization?.image) {
      const link = document.createElement('a');
      link.href = currentVisualization.image;
      link.download = `${currentShoe.shoe.brand}_${currentShoe.shoe.name}_${currentVisualization.angle}.jpg`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  if (visualizations.length === 0) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="w-full max-w-6xl mx-auto"
    >
      <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl p-6 md:p-8 border border-white/20">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="bg-gradient-to-r from-green-500 to-blue-500 p-3 rounded-xl">
              <Eye className="w-6 h-6 text-white" />
            </div>
            <div>
              <h2 className="text-2xl font-bold text-gray-800">
                Outfit Visualizations
              </h2>
              <p className="text-gray-600">
                Generated by Gemini 2.5 Flash
              </p>
            </div>
          </div>
          
          <button
            onClick={downloadImage}
            className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-4 py-2 rounded-xl font-semibold hover:from-green-600 hover:to-blue-600 transition-all duration-300 flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            Download
          </button>
        </div>

        {/* Shoe Navigation */}
        <div className="flex items-center justify-between mb-6">
          <button
            onClick={prevShoe}
            className="p-3 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
          >
            <ChevronLeft className="w-5 h-5 text-gray-600" />
          </button>
          
          <div className="text-center">
            <h3 className="text-xl font-bold text-gray-800">
              {currentShoe.shoe.brand} {currentShoe.shoe.name}
            </h3>
            <p className="text-gray-600">
              {currentShoe.shoe.color} â€¢ {currentShoe.shoe.style}
            </p>
          </div>
          
          <button
            onClick={nextShoe}
            className="p-3 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
          >
            <ChevronRight className="w-5 h-5 text-gray-600" />
          </button>
        </div>

        {/* Main Visualization */}
        <div className="bg-gradient-to-br from-gray-50/80 to-gray-100/80 rounded-2xl p-6 mb-6 backdrop-blur-sm">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-lg font-semibold text-gray-800">
              {currentVisualization?.angle.toUpperCase()} View
            </h4>
            
            <div className="flex gap-2">
              <button
                onClick={prevAngle}
                className="p-2 rounded-full bg-white hover:bg-gray-50 transition-colors"
              >
                <RotateCcw className="w-4 h-4 text-gray-600" />
              </button>
              <button
                onClick={nextAngle}
                className="p-2 rounded-full bg-white hover:bg-gray-50 transition-colors"
              >
                <RotateCcw className="w-4 h-4 text-gray-600 rotate-180" />
              </button>
            </div>
          </div>
          
          <AnimatePresence mode="wait">
            <motion.div
              key={`${currentShoeIndex}-${currentAngleIndex}`}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              transition={{ duration: 0.3 }}
              className="relative"
            >
              {currentVisualization?.image && (
                <div className="flex justify-center">
                  <img
                    src={currentVisualization.image}
                    alt={`${currentShoe.shoe.name} - ${currentVisualization.angle} view`}
                    className="max-w-full max-h-80 w-auto h-auto object-contain rounded-lg bg-white shadow-sm"
                    style={{ maxWidth: '500px', maxHeight: '400px' }}
                  />
                </div>
              )}
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Angle Navigation */}
        <div className="flex justify-center gap-2 mb-6">
          {currentShoe.visualizations.map((viz, index) => (
            <button
              key={index}
              onClick={() => setCurrentAngleIndex(index)}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                index === currentAngleIndex
                  ? 'bg-blue-500 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              {viz.angle.toUpperCase()}
            </button>
          ))}
        </div>

        {/* Shoe Thumbnails */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {visualizations.map((shoeViz, shoeIndex) => (
            <motion.div
              key={shoeIndex}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: shoeIndex * 0.1 }}
              onClick={() => {
                setCurrentShoeIndex(shoeIndex);
                setCurrentAngleIndex(0);
              }}
              className={`p-4 rounded-xl border-2 cursor-pointer transition-all duration-300 ${
                shoeIndex === currentShoeIndex
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-200 bg-white hover:border-gray-300 hover:shadow-md'
              }`}
            >
              <div className="text-center">
                <div className="w-16 h-16 mx-auto mb-3 bg-gradient-to-br from-blue-400 to-purple-400 rounded-xl flex items-center justify-center text-2xl">
                  ðŸ‘Ÿ
                </div>
                <h5 className="font-semibold text-gray-800 text-sm mb-1">
                  {shoeViz.shoe.brand}
                </h5>
                <p className="text-xs text-gray-600 mb-2">
                  {shoeViz.shoe.name}
                </p>
                <div className="flex justify-center gap-1">
                  {shoeViz.visualizations.map((_, angleIndex) => (
                    <div
                      key={angleIndex}
                      className={`w-2 h-2 rounded-full ${
                        shoeIndex === currentShoeIndex && angleIndex === currentAngleIndex
                          ? 'bg-blue-500'
                          : 'bg-gray-300'
                      }`}
                    />
                  ))}
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {/* Shoe Details */}
        <div className="mt-6 p-4 bg-gray-50/80 rounded-2xl backdrop-blur-sm">
          <h4 className="font-semibold text-gray-800 mb-2">
            Why this shoe works:
          </h4>
          <p className="text-gray-700">
            {currentShoe.shoe.reason}
          </p>
        </div>
      </div>
    </motion.div>
  );
};

export default OutfitVisualization;
